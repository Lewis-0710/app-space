{"version":3,"sources":["../../controllers/codepush.js"],"names":["log","log4js","getLogger","tag","module","exports","deployment_key","type","required","app_version","label","package_hash","client_unique_id","CodePushRouter","updateCheck","ctx","next","appId","validatedQuery","versions","common","parseVersion","debug","tempVersion","version","models","Version","findOne","active","grayScaleLimit","minVersion","maxVersion","grayVersion","versionCode","forceVersion","updateMode","rs","packageId","downloadURL","downloadUrl","description","isAvailable","isDisabled","isMandatory","appVersion","targetBinaryRange","packageHash","packageSize","updateAppVersion","shouldRunBinaryVersion","rollout","_","eq","getBlobDownloadUrl","downloadPath","changeLog","size","body"],"mappings":"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","file":"codepush.js","sourcesContent":["import {\n  request,\n  summary,\n  body,\n  tags,\n  middlewares,\n  formData,\n  responses,\n  query,\n  path\n} from '../swagger';\nimport {responseWrapper} from \"../utils/util\";\n\nimport log4js from 'log4js'\nconst log = log4js.getLogger(\"cps:apps\");\nimport models from \"../model\";\nimport common from \"../utils/common\";\nimport _ from \"lodash\";\nconst tag = tags(['CodePush']);\n\nmodule.exports = class CodePushRouter {\n\n\n  @request('get', '/api/v0.1/public/codepush/update_check')\n  @summary(\"CodePush检查更新\")\n  @tag\n  @query({\n     deployment_key: {type: 'string', required: true},\n     app_version: {type: 'string', required: true},\n     label: {type: 'string', required: false},\n     package_hash: {type: 'string', required: false},\n     client_unique_id: {type: 'string', required: false},\n    }\n  )\n  static async updateCheck(ctx, next) {\n      let {deployment_key: appId, app_version, label, package_hash, client_unique_id} = ctx.validatedQuery;\n\n      let versions = common.parseVersion(app_version);\n      log.debug(\"versions\",versions)\n      let tempVersion = {};\n      //正常\n      let version = await models.Version.findOne({\n          appId: appId,\n          active: true,\n          grayScaleLimit: false,\n          minVersion: { \"$lte\": versions },\n          maxVersion: { '$gt': versions }\n      });\n\n      //灰度版本\n      let grayVersion = await models.Version.findOne({\n              appId: appId,\n              active: true,\n              grayScaleLimit: true,\n              minVersion: { \"$lte\": versions },\n              maxVersion: { '$gt': versions },\n              '$expr': {//大于等于\n                  '$gte': ['$grayScaleSize', '$downloadCount']\n              }\n          }\n      )\n\n      if (grayVersion && version) {\n          if (version.versionCode > version.grayVersion) {\n              tempVersion = version;\n          } else {\n              tempVersion = grayVersion;\n          }\n      } else if (!grayVersion && version) {\n          tempVersion = version;\n      } else if (grayVersion && !version) {\n          tempVersion = grayVersion;\n      }\n      //强制\n      let forceVersion = await models.Version.findOne({\n          appId: appId,\n          active: true,\n          updateMode: 'force',\n          grayScaleLimit: true,\n          minVersion: { \"$lte\": versions },\n          maxVersion: { '$gt': versions },\n      });\n\n      if (tempVersion && forceVersion) {\n          tempVersion.updateMode = 'force';\n      }\n\n      let rs = {\n          packageId: 0,\n          downloadURL: \"\",\n          downloadUrl: \"\",\n          description: \"\",\n          isAvailable: false,\n          isDisabled: true,\n          isMandatory: false,\n          appVersion: app_version,\n          targetBinaryRange: \"\",\n          packageHash: \"\",\n          label: \"\",\n          packageSize: 0,\n          updateAppVersion: false,\n          shouldRunBinaryVersion: false,\n          rollout: 100\n      };\n      if (tempVersion && !_.eq(tempVersion.packageHash, package_hash)) {\n          delete rs.packageId;\n          delete rs.rollout;\n          // rs.packageId = tempVersion._id;\n          rs.targetBinaryRange = tempVersion.appVersion;\n          rs.downloadUrl = rs.downloadURL = common.getBlobDownloadUrl(tempVersion.downloadPath);\n          rs.description = tempVersion.changeLog;\n          rs.isAvailable = tempVersion.active;\n          rs.isDisabled = !tempVersion.active;\n          rs.isMandatory = tempVersion.updateMode == 'force';\n          rs.appVersion = tempVersion.appVersion;\n          rs.packageHash = tempVersion.packageHash;\n          rs.label = '';\n          rs.packageSize = tempVersion.size;\n          // rs.rollout = 100;\n      }\n      if (!tempVersion) {\n          ctx.body = responseWrapper(false, \"您已经是最新版本了\");\n      } else {\n          ctx.body = responseWrapper( {\"update_info\": rs})\n      }\n  }\n\n}\n\n"]}