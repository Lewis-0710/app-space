{"version":3,"sources":["../../controllers/auth.js"],"names":["jwt","require","tag","loginSchema","username","type","required","password","registerSchema","email","module","exports","oldpwd","newpwd","mobile","qq","company","career","userId","description","newPassword","AuthRouter","apiToken","ctx","next","_user","state","user","data","User","findOne","_id","md5","crypto","createHash","salt","Date","key","update","digest","findByIdAndUpdate","body","Error","login","request","console","log","config","openLdap","ldapUser","Ldap","auth","catch","error","name","bcrypt","hash","newUser","mail","task","Fawn","Task","result","save","run","useMongoose","valide","compare","token","sign","permission","exp","Math","floor","now","secret","register","allowRegister","find","length","initAdminAccount","adminAccount","adminPassword","modifyPassword","userData","findById","changeUserInfo","updateOne","getUserInfo","userInfo","geAccounts","users","deleteUser","validatedParams","models","deleteMany","Collaborator","resetPassword","hashPassword"],"mappings":"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","file":"auth.js","sourcesContent":["'use strict';\n\nimport {request, summary, tags, body, description, path} from '../swagger';\nimport User  from \"../model/user\";\nimport { responseWrapper } from \"../utils/util\";\nimport bcrypt from \"bcrypt\"\nimport Fawn from \"fawn\"\nimport Mail from '../utils/mail'\nimport config from '../config'\nimport Ldap from '../utils/ldap'\nimport crypto from 'crypto'\nimport verify from \"../utils/verify\";\nimport models from \"../model\";\n\nconst jwt = require('jsonwebtoken');\n\nconst tag = tags(['认证']);\n\nlet loginSchema = {\n    username: {\n        type: 'string',\n        required: true\n    },\n    password: {\n        type: 'string',\n        required: true\n    }\n}\n\nlet registerSchema = {\n    username: {\n        type: 'string',\n        required: true\n    },\n    password: {\n        type: 'string',\n        required: true\n    },\n    email: {\n        type: 'string',\n        required: true\n    }\n}\n\nmodule.exports = class AuthRouter {\n\n    @request('post', '/api/user/apitoken')\n    @summary('生成apitoken')\n    @tag\n    static async apiToken(ctx, next) {\n        let _user = ctx.state.user.data\n        let user = await User.findOne({ _id: _user._id })\n        if (user) {\n            // var key = await bcrypt.hash(user.email, 10)\n            let md5 = crypto.createHash('md5')\n            let salt = user.email + Date()\n            let key = md5.update(user.email + salt).digest('hex')\n            await User.findByIdAndUpdate(user._id, { apiToken: key })\n            ctx.body = responseWrapper(key)\n        } else {\n            throw new Error('授权失败，请重新登录后重试')\n        }\n    }\n\n    @request('post', '/api/user/login')\n    @summary('登录')\n    @tag\n    @body(loginSchema)\n    static async login(ctx, next) {\n        const { body } = ctx.request\n        console.log(body)\n            // 判断是否开放 ldap，如果开放ldap,\n            // 根据ldap的用户信息生成新用户\n        if (config.openLdap) {\n            // let auth = await Ldap.auth(body.username, body.password)\n            let ldapUser = await Ldap.auth(body.username, body.password).catch((error) => {\n                console.log(error)\n            })\n            let user = await User.findOne({ username: body.username });\n            if (ldapUser && ((!user) || user.username !== ldapUser.name)) {\n                console.log('user' + ldapUser)\n                let password = await bcrypt.hash(body.password, 10)\n                let newUser = new User({ username: ldapUser.name, password: password, email: ldapUser.mail });\n\n                let task = Fawn.Task();\n                let result = await task\n                    .save(newUser)\n                    .run({ useMongoose: true });\n            }\n        }\n\n        const user = await User.findOne({ username: body.username });\n        if (user) {\n            let valide = await bcrypt.compare(body.password, user.password)\n            if (!valide) {\n                throw new Error('用户名或密码错误')\n            }\n        } else {\n            throw new Error('用户名或密码错误')\n        }\n        user.token = jwt.sign({\n            data: {\n                _id: user._id,\n                username: user.username,\n                email: user.email,\n                permission: user.permission\n            },\n            exp: Math.floor(Date.now() / 1000) + (60 * 60 * 24)\n        }, config.secret)\n        ctx.body = responseWrapper(user)\n    }\n\n    @request('post', '/api/user/register')\n    @summary('注册用户')\n    @body(registerSchema)\n    @tag\n    static async register(ctx, next) {\n        let { body } = ctx.request;\n        if (!config.allowRegister && ctx.state.user.data.permission != 'root') {\n            throw new Error(\"不允许注册用户,联系管理员.\");\n        }\n        body.password = await bcrypt.hash(body.password, 10) // 10是 hash加密的级别, 默认是10，数字越大加密级别越高\n        let user = await User.find({ username: body.username });\n        if (!user.length) {\n            let newUser = new User(body);\n\n            let task = Fawn.Task();\n            let result = await task\n                .save(newUser)\n                .run({ useMongoose: true });\n            ctx.body = responseWrapper(newUser)\n        } else {\n            throw new Error(\"用户已存在\")\n        }\n    }\n\n    static async initAdminAccount() {\n        let username = config.adminAccount;\n        let adminPassword = config.adminPassword;\n        if (!username || !adminPassword) {\n            console.error('init admin',\"未设置初始化账号\")\n        }\n        let password = await bcrypt.hash(config.adminPassword, 10); // 10是 hash加密的级别, 默认是10，数字越大加密级别越高\n        let user = await User.find({ username: username });\n        if (!user.length) {\n            let newUser = new User({\n                username:username,\n                password:password,\n                permission: 'root',\n            });\n            let task = Fawn.Task();\n            await task.save(newUser)\n                .run({ useMongoose: true });\n            console.log('init admin',\"成功...\")\n        } else {\n            console.log('init admin',\"用户已存在\")\n        }\n    }\n\n    @request('post', '/api/user/password/modify')\n    @summary('修改用户密码')\n    @body({\n        oldpwd: {\n            type: 'string',\n            require: true\n        },\n        newpwd: {\n            type: 'string',\n            require: true\n        }\n    })\n    @tag\n    static async modifyPassword(ctx, next) {\n        let user = ctx.state.user.data;\n        let body = ctx.request.body;\n        let userData = await User.findById(user._id, \"password\")\n        if (!userData) {\n            throw new Error(\"用户不存在\");\n        }\n        let valide = await bcrypt.compare(body.oldpwd, userData.password);\n        if (!valide) {\n            throw new Error(\"密码错误\");\n        }\n        body.password = await bcrypt.hash(body.newpwd, 10); // 10是 hash加密的级别, 默认是10，数字越大加密级别越高\n        await User.findByIdAndUpdate(user._id, { password: body.password })\n        ctx.body = responseWrapper(true, \"密码修改成功\")\n    }\n\n    @request('post', '/api/user/modify')\n    @summary('修改用户资料')\n    @body({\n        mobile: {\n            type: 'string'\n        },\n        qq: {\n            type: 'string'\n        },\n        company: {\n            type: 'string'\n        },\n        career: {\n            type: 'string'\n        }\n    })\n    @tag\n    static async changeUserInfo(ctx, next) {\n        let user = ctx.state.user.data\n        let body = ctx.request.body\n        let userData = await User.findById(user._id, \"username\");\n        if (!userData) {\n            throw new Error(\"用户不存在\");\n        }\n        await User.updateOne({\n            username: user.username\n        }, {\n            mobile: body.mobile,\n            qq: body.qq,\n            company: body.company,\n            career: body.career\n        })\n        ctx.body = responseWrapper(true, \"用户资料修改成功\")\n    }\n\n    @request('get', '/api/user/info')\n    @summary('获取用户资料')\n    @tag\n    static async getUserInfo(ctx, next) {\n        let user = ctx.state.user.data\n        let userInfo = await User.findById(user._id, \"-password\");\n        if (!userInfo) {\n            throw new Error(\"用户不存在\");\n        }\n        ctx.body = responseWrapper(userInfo)\n    }\n\n    // @request('get', '/api/user/collaborators')\n    // @summary('获取用户团队成员列表')\n    // @tag\n    // static async getUserCollaborators(ctx, next) {\n    //     let user = ctx.state.user.data\n    //     let collaborators = await Collaborator.findById(user._id, \"teams\");\n    //     if (!user) {\n    //         throw new Error(\"用户不存在\");\n    //     }\n    //     ctx.body = responseWrapper(user)\n    // }\n    //\n    // @request('post', '/api/user/resetPassword')\n    // @summary('通过邮箱重置密码')\n    // @tag\n    // @body({\n    //     email: {\n    //         type: 'string',\n    //         required: true\n    //     }\n    // })\n    // static async resetPassword(ctx, next) {\n    //     let body = ctx.request.body\n    //\n    //     let user = await User.findOne({\n    //         email: body.email\n    //     }, \"-password\");\n    //     if (!user) {\n    //         throw new Error(\"邮箱有误,没有该用户\");\n    //     }\n    //\n    //     let newPassword = Math\n    //         .random()\n    //         .toString(36)\n    //         .substring(2, 5) + Math\n    //         .random()\n    //         .toString(36)\n    //         .substring(2, 5);\n    //     let hashPassword = await bcrypt.hash(newPassword, 10); // 10是 hash加密的级别, 默认是10，数字越大加密级别越高\n    //     await User.findByIdAndUpdate(user._id, { password: hashPassword })\n    //     Mail.send([body.email], \"AppSpace密码重置邮件\", `您的密码已重置${newPassword}`)\n    //     ctx.body = responseWrapper(\"密码已重置,并通过邮件发送到您的邮箱\")\n    // }\n\n    @request('get', '/api/user/accounts')\n    @summary('获取全部账号')\n    @tag\n    static async geAccounts(ctx, next) {\n        let user = ctx.state.user.data;\n        let users = [];\n        console.log('user', user);\n        if (user.permission == 'root') {\n            users = await User.find()\n            // console.log('geAccounts', users);\n        }\n        ctx.body = responseWrapper(users)\n    }\n\n    @request('delete', '/api/user/{userId}')\n    @summary(\"删除账号\")\n    @tag\n    @path({\n        userId: { type: 'string', description: '用户id',required: true}\n    })\n    static async deleteUser(ctx, next) {\n        let user = ctx.state.user.data;\n        if (user.permission != 'root') {\n            throw new Error(`权限不足`);\n        }\n        let {userId} = ctx.validatedParams;\n        await models.User.deleteMany({_id: userId})\n        await models.Collaborator.deleteMany({_id: userId})\n        ctx.body = responseWrapper(true, \"成功\")\n    }\n\n    @request('post', '/api/user/resetPassword')\n    @summary('管理员重置密码')\n    @tag\n    @body({\n        userId: {\n            type: 'string',\n            description: '用户id',\n            required: true\n        },\n        newPassword:{\n            type: 'string',\n            description: '新密码',\n            required: true\n        }\n    })\n    static async resetPassword(ctx, next) {\n        let body = ctx.request.body\n        let user = await User.findOne({\n            _id: body.userId\n        }, \"-password\");\n        if (!user) {\n            throw new Error(\"邮箱有误,没有该用户\");\n        }\n        let hashPassword = await bcrypt.hash(body.newPassword, 10); // 10是 hash加密的级别, 默认是10，数字越大加密级别越高\n        await User.findByIdAndUpdate(user._id, { password: hashPassword })\n        ctx.body = responseWrapper(\"密码已重置\")\n    }\n\n\n}\n"]}