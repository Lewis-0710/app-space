{"version":3,"sources":["../../controllers/message.js"],"names":["tag","module","exports","page","type","default","description","size","MessageRouter","getMessages","ctx","next","query","user","state","data","result","Message","find","receiver","_id","limit","skip","body","getMessageCount","count","unread","status","total","markMessageRead","update","clearMessages","deleteMany"],"mappings":"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","file":"message.js","sourcesContent":["\"use strict\";\n\nimport { request, summary, tags, body, description, query } from \"../swagger\";\nimport Message from \"../model/message\";\n\nimport { responseWrapper } from \"../utils/util\";\nimport bcrypt from \"bcrypt\";\nimport Fawn from \"fawn\";\n\nconst tag = tags([\"消息\"]);\n\nmodule.exports = class MessageRouter {\n  @request(\"get\", \"/api/messages\")\n  @summary(\"获取该用户未读消息列表\")\n  @query({\n    page: { type: \"number\", default: 0, description: \"分页页码(可选)\" },\n    size: { type: \"number\", default: 10, description: \"每页条数(可选)\" }\n  })\n  @tag\n  static async getMessages(ctx, next) {\n    let page = ctx.query.page || 0;\n    let size = ctx.query.size || 10;\n    let user = ctx.state.user.data;\n\n    let result = await Message.find({ receiver: user._id })\n      .limit(size)\n      .skip(page * size);\n    ctx.body = responseWrapper(result);\n  }\n\n  @request(\"get\", \"/api/messages/count\")\n  @summary(\"获取消息总条数和未读条数\")\n  @tag\n  static async getMessageCount(ctx, next) {\n    let user = ctx.state.user.data;\n    let count = await Message.count({ receiver: user._id });\n    let unread = await Message.count({ receiver: user._id, status: \"unread\" });\n    ctx.body = responseWrapper({ total: count, unread: unread });\n  }\n\n  @request(\"get\", \"/api/messages/markread\")\n  @summary(\"把消息全部标记为已读\")\n  @tag\n  static async markMessageRead(ctx, next) {\n    let user = ctx.state.user.data;\n    let result = await Message.update({ receiver: user._id ,status:'unread'},{\n        status: \"hasread\"\n    });\n    ctx.body = responseWrapper(true,'所有消息已标记已读');\n  }\n\n  @request(\"delete\", \"/api/messages\")\n  @summary(\"清空消息列表\")\n  @query({\n    page: { type: \"number\", default: 0, description: \"分页页码(可选)\" },\n    size: { type: \"number\", default: 10, description: \"每页条数(可选)\" }\n  })\n  @tag\n  static async clearMessages(ctx, next) {\n    let page = ctx.query.page || 0;\n    let size = ctx.query.size || 10;\n    let user = ctx.state.user.data;\n    await Message.deleteMany({ receiver: user._id });\n    ctx.body = responseWrapper(true, \"消息已清空\");\n  }\n};\n"]}